import org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * Copyright (c) 2015-2023 Uli Bubenheimer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp)
    id('maven-publish')
    id('signing')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.toolchain.get())
    }
}

kotlin {
    explicitApi = ExplicitApiMode.Strict // applied to only non-test compilations

    compilerOptions {
        jvmTarget = JvmTarget.fromTarget(libs.versions.java.source.get())
    }
}

android {
    namespace "org.bubenheimer.instancelimit"

    buildFeatures {
        buildConfig false
    }

    setCompileSdk(libs.versions.android.sdk.compile.get().toInteger())

    compileOptions {
        setSourceCompatibility(libs.versions.java.source.get())
        setTargetCompatibility(libs.versions.java.source.get())
    }

    defaultConfig {
        setTargetSdk(libs.versions.android.sdk.target.get().toInteger())
        setMinSdk(libs.versions.android.sdk.min.get().toInteger())
        versionName version
    }

    variantFilter { variant ->
        if (getBuildType().getName() == "release") {
            setIgnore(true)
        }
    }

    publishing {
        singleVariant('debug') {
            withJavadocJar()
            withSourcesJar()
        }
    }
}

dependencies {
    implementation(project(":api"))

    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.junit)
    testImplementation(libs.mockk)
    kspTest(project(':processor'))
}

publishing {
    publications {
        library(MavenPublication) {
            afterEvaluate {
                from components.debug
            }

            pom pomConfig
        }
    }

    repositories publicationRepositories

    signing {
        useGpgCmd()

        sign publishing.publications.library
    }
}
